{"version":3,"sources":["meteor://ðŸ’»app/server/cleanup.coffee"],"names":["Process","Npm","require","share","cleanupQuickQueries","borderline","Date","getTime","day","Queries","find","isQuick","executingInterval","$lte","updatedAt","$lt","forEach","query","remove","_id","cleanupCachedQueryResults","config","Configs","findOne","transform","Transformations","rmCommand","dataTempdir","isSSH","wrapCommand","exec","Meteor","bindEnvironment","err","stdout","stderr","code","error","result","trim","Error","after","userId"],"mappings":"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","file":"/server/cleanup.coffee","sourcesContent":["Process = Npm.require(\"child_process\")\n\nshare.cleanupQuickQueries = ->\n  borderline = new Date(new Date().getTime() - 7 * share.day)\n#  borderline = new Date(new Date().getTime() - 1000)\n  share.Queries.find({isQuick: true, executingInterval: {$lte: 0}, updatedAt: {$lt: borderline}}).forEach (query) ->\n    share.Queries.remove(query._id)\n\nshare.cleanupCachedQueryResults = ->\n  borderline = new Date(new Date().getTime() - 2 * share.day)\n#  borderline = new Date(new Date().getTime() - 1000)\n  config = share.Configs.findOne({}, {transform: share.Transformations.config})\n  share.Queries.find({executingInterval: {$lte: 0}, updatedAt: {$lt: borderline}}).forEach (query) ->\n    rmCommand = \"rm -f \" + config.dataTempdir + \"/\" + query._id + \".rwf\"\n    if config.isSSH\n      rmCommand = config.wrapCommand(rmCommand)\n    Process.exec(rmCommand, Meteor.bindEnvironment((err, stdout, stderr) ->\n      result = stdout.trim()\n      error = stderr.trim()\n      code = if err then err.code else 0\n      if error\n        throw new Error(error)\n    ))\n\nshare.Queries.after.remove (userId, query) ->\n  config = share.Configs.findOne({}, {transform: share.Transformations.config})\n  rmCommand = \"rm -f \" + config.dataTempdir + \"/\" + query._id + \".rwf\"\n  if config.isSSH\n    rmCommand = config.wrapCommand(rmCommand)\n  Process.exec(rmCommand, Meteor.bindEnvironment((err, stdout, stderr) ->\n    result = stdout.trim()\n    error = stderr.trim()\n    code = if err then err.code else 0\n    if error\n      throw new Error(error)\n  ))\n"]}