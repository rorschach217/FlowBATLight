{"version":3,"sources":["meteor://ðŸ’»app/server/periodic.execution.coffee"],"names":["share","periodicExecution","timeout","nearestExecutingAt","execute","Queries","find","executingAt","$lte","Date","forEach","query","getTime","executingInterval","update","_id","$set","isInputStale","isOutputStale","skipResetTimeout","resetTimeout","nearestQuery","findOne","$ne","sort","Meteor","clearTimeout","Math","max","setTimeout","_","bindAll"],"mappings":";;;;;;;;;AAAAA,KAAK,CAACC,iBAAN,GACE;AAAAC,SAAA,EAAS,IAAT;AACAC,oBAAA,EAAoB,IADpB;AAEAC,SAAA,EAAS;AACPJ,SAAK,CAACK,OAAN,CAAcC,IAAd,CAAmB;AAACC,iBAAA,EAAa;AAACC,YAAA,EAAM,IAAIC,IAAJ;AAAP;AAAd,KAAnB,EAAsDC,OAAtD,CAA8D,UAACC,KAAD;AAE5D,UAAAJ,WAAA,CAF4D,CAM5D;;AAJAA,iBAAA,GAAc,IAAIE,IAAJ,CAAS,IAAIA,IAAJ,GAAWG,OAAX,KAAuBD,KAAK,CAACE,iBAAtC,CAAd;AAMA,aALAb,KAAK,CAACK,OAAN,CAAcS,MAAd,CAAqBH,KAAK,CAACI,GAA3B,EAAgC;AAACC,YAAA,EAAM;AAACC,sBAAA,EAAc,IAAf;AAAqBC,uBAAA,EAAe,IAApC;AAA0CX,qBAAA,EAAaA;AAAvD;AAAP,OAAhC,EAA6G;AAACY,wBAAA,EAAkB;AAAnB,OAA7G,CAKA;AARF;AAkBA,WAdA,KAACC,YAAD,EAcA;AArBF;AAQAA,cAAA,EAAc;AACZ,QAAAC,YAAA,EAAAnB,OAAA;AAAAmB,gBAAA,GAAerB,KAAK,CAACK,OAAN,CAAciB,OAAd,CAAsB;AAACf,iBAAA,EAAa;AAACgB,WAAA,EAAK;AAAN;AAAd,KAAtB,EAAkD;AAACC,UAAA,EAAM;AAACjB,mBAAA,EAAa;AAAd;AAAP,KAAlD,CAAf;AACAL,WAAA,GAAU,KAAK,IAAf;;AACA,QAAGmB,YAAH;AACEnB,aAAA,GAAUmB,YAAY,CAACd,WAAb,CAAyBK,OAAzB,KAAqC,IAAIH,IAAJ,GAAWG,OAAX,EAA/C;AAyBD;;AAxBD,QAAG,KAACV,OAAJ;AACEuB,YAAM,CAACC,YAAP,CAAoB,KAACxB,OAArB;AA0BD;;AAzBDA,WAAA,GAAUyB,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe1B,OAAf,CAAV,CAPY,CACZ;AAiCA;;AACA,WA1BA,KAACA,OAAD,GAAWuB,MAAM,CAACI,UAAP,CAAkB,KAACzB,OAAnB,EAA4BF,OAA5B,CA0BX;AAnCY;AARd,CADF;;AAoBA4B,CAAC,CAACC,OAAF,CAAU/B,KAAK,CAACC,iBAAhB,EAAmC,SAAnC,EAA8C,cAA9C,E","file":"/server/periodic.execution.coffee","sourcesContent":["share.periodicExecution =\n  timeout: null\n  nearestExecutingAt: null\n  execute: ->\n    share.Queries.find({executingAt: {$lte: new Date()}}).forEach (query) ->\n#      cl \"executing\" + query.name + \" at \" + new Date() + \" requested at \" + query.executingAt\n      executingAt = new Date(new Date().getTime() + query.executingInterval)\n      share.Queries.update(query._id, {$set: {isInputStale: true, isOutputStale: true, executingAt: executingAt}}, {skipResetTimeout: true})\n    @resetTimeout()\n  resetTimeout: ->\n    nearestQuery = share.Queries.findOne({executingAt: {$ne: null}}, {sort: {executingAt: 1}})\n    timeout = 30 * 1000\n    if nearestQuery\n      timeout = nearestQuery.executingAt.getTime() - new Date().getTime()\n    if @timeout\n      Meteor.clearTimeout(@timeout)\n    timeout = Math.max(1000, timeout) # at least a second in future; protection from state with executingAt in the past\n#    cl \"resetTimeout to \" + timeout\n    @timeout = Meteor.setTimeout(@execute, timeout)\n\n_.bindAll(share.periodicExecution, \"execute\", \"resetTimeout\")\n"]}